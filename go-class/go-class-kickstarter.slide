Go Class - Kickstarter
Zalando TechAcademy
16:23 09 Mar 2016

Tags: Go, TechAcademy

Sandor Szücs
NinjaEngineer, Zalando
sandor.szuecs@zalando.de
https://sandor.szuecs.net/
@sszuecs
[[http://go-talks.appspot.com/github.com/szuecs/slides/go-class/go-class-kickstarter.slide/][Slides available http://go-talks.appspot.com/github.com/szuecs/slides/go-class/go-class-kickstarter.slide/]]
[[https://github.com/szuecs/slides/][Slides src available https://github.com/szuecs/slides/]]

* Requirements
- install https://golang.org/doc/install
- set ENV: GOROOT, GOPATH, GOBIN
- test: https://golang.org/doc/install#testing
- If you are not prepared, use [[https://play.golang.org/][https://play.golang.org/]]

* Why go?
.image gopher.jpeg
.caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]

* Why go?
- Fast and fast to compile
- Concurrency + no GIL: CPU bound computation can use more then 1 core
- support for Closures (Lambda, anonymous functions)
- Easy to read and to write
- Tooling

statically linked binaries

- docker container < 20MB (you only need: FROM scratch)
- create clients for all major OS (Linux, MacOSX, Windows)

* Why go?
- Many new projects in Go: K8s, Influxdb, Docker, ..
- Many companies are using it including Google, Soundcloud, Uber, Zalando:
- [[https://github.com/zalando/skipper][Zalando's HTTP router]] https://github.com/zalando/skipper
- [[https://godoc.org/github.com/google/seesaw][Google LB]] https://godoc.org/github.com/google/seesaw
- [[http://www.unofficialgoogledatascience.com/2015/12/replacing-sawzall-case-study-in-domain.html][Migrate Sawzall to Go - Google Data Engineering Language]]
- [[https://github.com/prometheus/prometheus][SoundCloud's Prometheus]] https://github.com/prometheus/prometheus
- [[https://eng.uber.com/go-geofence/][Uber's geofence lookups]]

* Hello World
    % go run hello.go
.play src/basics/hello.go

* Goals of Go
- The efficiency of a statically-typed compiled language
- with ease of programming of a dynamic language.
- Safety: type-safe and memory-safe.
- Good support for concurrency and communication.
- Efficient, latency-free garbage collection.
- High-speed compilation. (1.5 and 1.6 slower but better ASM)
.caption Goals 2009 by Rob Pike

* Basics - var, utf8
.play src/basics/basics.go

* Basics - branches
.play src/basics/branches.go /^func main/,/^}/

* Basics - loops
.play src/basics/loop.go  /^func main/,/^}/

* Basics - struct
.play src/basics/struct.go

* Basics - Pointers
.play src/basics/ptr.go

* Basics - OO
- no type hierarchy
- structs, pointers and methods (call by reference)
.play src/basics/basics_oo.go

* Exame 1 - Write a function that implements string reverse (Hint: use bytes.Buffer)

  package main

  import "fmt"

  func main() {
      fmt.Println(reverse("abc"))
  }

  func reverse(s string) string {
      // TODO
  }

* expected result
  $ GOPATH=`pwd` go run exame1.go
  cba

* Solution Exame 1
.play src/exame1/exame1.go  /^func reverse/,/^}/

* err idiom - example
.play src/basics/err.go /^func main/,/^}/

* Basics - package and exported names
- package declaration creates a namespace for variables, types, methods, functions, ..
.code src/foo/a.go

* Basics - package and exported names
.code pkg_main.go

* Exame 2 - Refactor your string reverse function to a method on type RString

  // $ cat ./src/rstring/rstring.go
  package rstring

  type RString struct {
  	S string
  }

  func New(s string) *RString {
  	return &RString{S: s}
  }

  func (s *RString) Reverse() *RString {
        // TODO
  }

  // run it: $ GOPATH=`pwd` go run exame2.go
  // $ cat ./exame2.go
  package main
  func main() {
    rs := rstring.New("hello world")
    fmt.Println(rs.Reverse())
  }

* expected result
  $ GOPATH=`pwd` go run exame2.go
  &{dlrow olleh}

* Solution Exame 2
.code src/exame2/src/rstring/rstring.go  /^import .*/,/\)/
.code src/exame2/src/rstring/rstring.go  /^\/\/ START/,/END/

* Basics - interface
- Specify behaviour of a method defined by: (name, parameter, return value)
- Interfaces are implicitly satisfied
- Interfaces are composable
- Interfaces is a solution for not having generics
- Interfaces are some kind of dynamic dispatch
- empty interface is similar to Object in java: interface{}

* Basics - interface Example
.play src/basics/interface.go

* Basics - interface stdlib Examples
- stringer
    String() string
- io.Reader
    Read(p []byte) (n int, err error)
- sort.Interface
    Len() int
    Less(i,j int) bool
    Swap(i,j int)

* Basics - interfaces are composable
.code src/basics/readwriter.go

* Basics - implement Stringer interface
.play src/basics/a_stringer.go

* Basics - implement Stringer interface - GOTCHA
.play src/basics/wrong_stringer.go

* Exame 3 - Implement the stringer and sort interface on type RString and a list of RString

  package rstring

  type RString struct { S string }

  // String implements the stringer interface
  func (s RString) String() string {
      // TODO
  }

  type SortableRString []*RString

  // implement the sort interface
  func (s SortableRString) Len() int {
      TODO
  }
  func (s SortableRString) Less(i,j int) bool {
      TODO
  }
  func (s SortableRString) Swap(i,j int) {
      TODO
  }

* expected result
  $ GOPATH=`pwd` go run exame3.go
  [hello world a abc ab]
  [a ab abc hello world]

* Solution Exame 3
.code src/exame3/src/rstring/rstring.go  /^\/\/ START/,/END/

* Recap: type system
- strong, static types
- no subtyping nor inheritance
- normal method calls: static dispatch
- dynamic dispatch -> use interfaces
- type inference:  x := 0  // same as: var x int = 0
- no generics -> use interfaces or code generation
- no exceptions -> use err != nil check and defer fd.Close()

* array, slice, map
- array: static size!
    ary := [10]int64
    ary2 := [...]float64{7.0, 8.5, 9.1}
- slice: array that can grow
    sl := []int64
    sl2 := []float64{7.0, 8.5, 9.1}
- map: HashMap
   h := map[string]int {
      "foo": 23,
      "bar": 42,
   }

* array, slice, map - iterator
	sl2 := []float64{7.0, 8.5, 9.1}
	for idx, item := range sl2 {
		fmt.Printf("%d: %0.2f\n", idx, item)
	}

	h := map[string]int{
		"foo": 23,
		"bar": 42,
	}
	for k, v := range h {
		fmt.Printf("%s: %d\n", k, v)
	}

* Dependencies
- Use godep

    echo vendor >> .gitignore
    echo Godeps/_workspace >> .gitignore
    git add Godeps/Godeps.json

* References - Learn GO
.link https://tour.golang.org/welcome/1
.link https://golang.org/doc/code.html
.link https://golang.org/doc/effective_go.html
.link https://talks.golang.org/2014/names.slide#1
.link http://www.infoq.com/news/2016/03/go-patterns

####### slide magic
# [[http://reallink][link name]]
# .play -edit x.go
# .code x.go /^func main/,/^}/
# .play y.go
# .image image.jpg
# .iframe http://foo
# .link http://foo label
# .html file.html
###################
